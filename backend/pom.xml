<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>net.wuxianjie</groupId>
    <artifactId>spring-boot-fullstack</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>

  <artifactId>backend</artifactId>

  <properties>
    <java.version>17</java.version>
  </properties>

  <dependencies>
    <!--
      Jasypt：加解密 Spring Boot 配置文件，
      对应 Jasypt Maven 插件：`com.github.ulisesbocchio:jasypt-maven-plugin`
    -->
    <dependency>
      <groupId>com.github.ulisesbocchio</groupId>
      <artifactId>jasypt-spring-boot-starter</artifactId>
    </dependency>

    <!-- Lombok：通过注解的方式来简化样板代码，尤其是 POJO 类 -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Web 应用启动器：包含 Spring MVC、内嵌 Tomcat 等 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Security 启动器：提供认证（Authentication）和授权（Authorization）实现 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- 数据验证启动器：基于 Java 的 Bean Validation 规范 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- 面向切面编程启动器：包含了 Spring AOP 依赖和 AspectJ -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>

    <!-- 元数据工具：支持 `application.yml` 中对于配置属性的自动补全、提示和文档化支持 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- 简化在 Spring Boot 中集成 MyBatis -->
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
    </dependency>

    <!-- MySQL JDBC 驱动程序 -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
    </dependency>

    <!-- Redis 启动器：默认使用 Lettuce 作为客户端 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>

    <!-- 测试套件启动器：包括了多种测试库和工具，支持单元测试、集成测试等 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!-- 最终打包后的项目名 -->
    <finalName>backend</finalName>

    <plugins>
      <!-- Spring Boot 应用打包和运行的 Maven 插件 -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <!-- 在构建最终的应用包（如 JAR 文件）时，避免在运行时环境中包含不必要的依赖 -->
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>

      <!--
        Jasypt Maven 插件

        对应 Jasypt Compile 依赖：`com.github.ulisesbocchio:jasypt-spring-boot-starter`

        1. 加密字符串：

        ```
        mvn jasypt:encrypt-value \
          -Djasypt.encryptor.password=wxj#secret_ \
          -Djasypt.plugin.value=pass123
        ```

        2. 解密字符串：

        ```
        mvn jasypt:decrypt-value \
          -Djasypt.encryptor.password=wxj#secret_ \
          -Djasypt.plugin.value=KOTlCZ7eoNB0p1NfdIyj/c+k5cA3KgVm5e+Wee0EuU4LaI6WfGOau9PCwCqJxZ0I
        ```

        3. 加密 Spring Boot 配置文件中属性值（`DEC(raw)` -> `ENC(encrypted)`）：

        ```
        mvn jasypt:encrypt -Djasypt.encryptor.password=wxj#secret_
        ```

        3.1 使用新密钥重新加密 Spring Boot 配置文件：

        ```
        mvn jasypt:reencrypt \
          -Djasypt.plugin.old.password=wxj#secret_ \
          -Djasypt.encryptor.password=new-wxj#secret_
        ```

        3.2 解密并打印 Spring Boot 配置文件内容：

        ```
        mvn jasypt:decrypt -Djasypt.encryptor.password=wxj#secret_
        ```

        4. 提供密钥以运行 Spring Boot 应用程序：

        ```
        java -Djasypt.encryptor.password=wxj#secret_ -jar backend.jar
        ```
      -->
      <plugin>
        <groupId>com.github.ulisesbocchio</groupId>
        <artifactId>jasypt-maven-plugin</artifactId>
        <configuration>
          <!-- 默认为 `src/main/resources/application.properties` -->
          <path>file:src/main/resources/application.yml</path>
        </configuration>
      </plugin>

      <!-- 将 SPA 应用拷贝到 `backend/target/classes/static` 目录中 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-frontend-resources</id>
            <!-- 设置为构建生命周期 `compile` 的上一个，即在生成源代码前，拷贝 SPA 目录 -->
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.outputDirectory}/static
              </outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/../frontend/dist</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
