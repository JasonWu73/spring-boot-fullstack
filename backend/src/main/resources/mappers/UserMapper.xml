<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.wuxianjie.backend.user.UserMapper">
  <select id="selectById" resultType="net.wuxianjie.backend.user.User">
    select
      id,
      created_at as createdAt,
      updated_at as updatedAt,
      remark,
      username,
      nickname,
      hashed_password as hashedPassword,
      status,
      authorities
    from user
    where id = #{id}
  </select>

  <select id="selectByUsername" resultType="net.wuxianjie.backend.user.User">
    select
      id,
      created_at as createdAt,
      updated_at as updatedAt,
      remark,
      username,
      nickname,
      hashed_password as hashedPassword,
      status,
      authorities
    from user
    where username = #{username}
  </select>

  <resultMap id="userInfo" type="net.wuxianjie.backend.user.dto.UserInfo">
    <constructor>
      <idArg column="id" javaType="long"/>
      <arg column="createdAt" javaType="java.time.LocalDateTime"/>
      <arg column="updatedAt" javaType="java.time.LocalDateTime"/>
      <arg column="remark" javaType="string"/>
      <arg column="username" javaType="string"/>
      <arg column="nickname" javaType="string"/>
      <arg
        column="status"
        javaType="net.wuxianjie.backend.user.AccountStatus"
      />
      <arg column="authorities" javaType="string"/>
    </constructor>
  </resultMap>

  <select id="selectInfoById" resultMap="userInfo">
    select
      id,
      created_at as createdAt,
      updated_at as updatedAt,
      remark,
      username,
      nickname,
      status,
      authorities
    from user
    where id = #{userId}
  </select>

  <select id="selectByQueryLimit" resultMap="userInfo">
    select
      id,
      created_at as createdAt,
      updated_at as updatedAt,
      remark,
      username,
      nickname,
      status,
      authorities
    from user
    <include refid="whereQuery"/>
    <if test="p.sortColumn == 'createdAt' or p.sortColumn == 'updatedAt'">
      order by ${p.sortColumn} ${p.sortOrder}
    </if>
    limit #{p.offset}, #{p.pageSize}
  </select>

  <select id="countByQuery" resultType="long">
    select count(1)
    from user
    <include refid="whereQuery"/>
  </select>

  <sql id="whereQuery">
    <where>
      <if test="q.username != null">
        and username like #{q.username}
      </if>
      <if test="q.nickname != null">
        and nickname like #{q.nickname}
      </if>
      <if test="q.status != null">
        and status = #{q.status}
      </if>
      <if test="q.authority != null">
        and (
          authorities = #{q.authority} or
          authorities like concat(#{q.authority}, ',%') or
          authorities like concat('%,', #{q.authority}, ',%') or
          authorities like concat('%,', #{q.authority})
        )
      </if>
    </where>
  </sql>

  <insert id="insert">
    insert into user (
      created_at,
      updated_at,
      remark,
      username,
      nickname,
      hashed_password,
      status,
      authorities
    )
    values (
      #{createdAt},
      #{updatedAt},
      #{remark},
      #{username},
      #{nickname},
      #{hashedPassword},
      #{status},
      #{authorities}
    )
  </insert>

  <update id="updateById">
    update user
    set
      updated_at = #{updatedAt},
      remark = #{remark},
      nickname = #{nickname},
      hashed_password = #{hashedPassword},
      status = #{status},
      authorities = #{authorities}
    where id = #{id}
  </update>

  <delete id="deleteById">
    delete from user
    where id = #{userId}
  </delete>
</mapper>
